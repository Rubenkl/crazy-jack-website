name: Deploy static site

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Detect Pages custom domain
        id: detect_custom_domain
        uses: actions/github-script@v7
        env:
          PAGES_CUSTOM_DOMAIN: ${{ vars.PAGES_CUSTOM_DOMAIN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const fs = require("fs");
            const path = require("path");

            const setDomain = (value) => {
              const normalized = (value || "").trim();
              core.setOutput("custom_domain", normalized);
              return normalized;
            };

            const explicit = (process.env.PAGES_CUSTOM_DOMAIN || "").trim();
            if (explicit) {
              core.info(`Using custom domain from repository variable: ${explicit}`);
              return setDomain(explicit);
            }

            const cnamePath = path.join(process.env.GITHUB_WORKSPACE, "public", "CNAME");
            if (fs.existsSync(cnamePath)) {
              const fromFile = fs.readFileSync(cnamePath, "utf8").trim();
              if (fromFile) {
                core.info(`Using custom domain from public/CNAME: ${fromFile}`);
                return setDomain(fromFile);
              }
            }

            try {
              const { data } = await github.rest.repos.getPages(context.repo);
              const cname = (data?.cname || "").trim();
              if (cname) {
                core.info(`Using custom domain from GitHub Pages API: ${cname}`);
              } else {
                core.info("No custom domain reported by GitHub Pages API.");
              }
              return setDomain(cname);
            } catch (error) {
              if (error.status === 404) {
                core.info("GitHub Pages has not been set up yet.");
                return setDomain("");
              }
              throw error;
            }

      - name: Configure GitHub Pages base path
        env:
          CUSTOM_DOMAIN: ${{ steps.detect_custom_domain.outputs.custom_domain }}
        run: |
          set -euo pipefail

          if [[ -n "${CUSTOM_DOMAIN:-}" ]]; then
            echo "Detected custom domain '${CUSTOM_DOMAIN}'. Using '/' as base path."
            echo "VITE_BASE_PATH=/" >> "$GITHUB_ENV"
            echo "EXPECTED_BASE_PATH=/" >> "$GITHUB_ENV"
          elif [[ "${GITHUB_REPOSITORY}" == "${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_OWNER}.github.io" ]]; then
            echo "Detected user/organization Pages site. Using '/' as base path."
            echo "VITE_BASE_PATH=/" >> "$GITHUB_ENV"
            echo "EXPECTED_BASE_PATH=/" >> "$GITHUB_ENV"
          else
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
            echo "Defaulting to project Pages base path '/${REPO_NAME}/'."
            echo "VITE_BASE_PATH=/${REPO_NAME}/" >> "$GITHUB_ENV"
            echo "EXPECTED_BASE_PATH=/${REPO_NAME}/" >> "$GITHUB_ENV"
          fi

      - name: Build site
        run: npm run build

      - name: Verify built asset base path
        run: node scripts/verify-base-path.mjs "$EXPECTED_BASE_PATH"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
